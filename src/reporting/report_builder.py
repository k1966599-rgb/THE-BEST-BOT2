import re
from typing import List, Dict, Any, Optional
from datetime import datetime
from ..decision_engine.trade_setup import TradeSetup
from ..analysis.data_models import Level, Pattern

class ReportBuilder:
    """Builds the final, comprehensive, user-specified report."""
    def __init__(self, config: dict):
        self.config = config

    def build_report(self, ranked_results: List[Dict[str, Any]], general_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        messages = []
        messages.append({"type": "header", "content": self._format_header(general_info)})
        for result in ranked_results:
            messages.append({"type": "timeframe", "content": self._format_timeframe_section(result)})

        final_message_content = self._format_combined_summary_and_trade(ranked_results)
        primary_rec = next((r for r in ranked_results if r.get('trade_setup')), None)
        messages.append({
            "type": "final_summary", "content": final_message_content,
            "keyboard": "follow_ignore" if primary_rec else None,
            "trade_setup": primary_rec.get('trade_setup') if primary_rec else None
        })
        return messages

    def _format_header(self, general_info: Dict) -> str:
        return (f"๐ ุชุญููู ููู ุดุงูู โ {general_info.get('symbol', 'N/A')} ๐\n\n"
                f"ุงูููุตุฉ: OKX Exchange\n"
                f"ุงูุชุงุฑูุฎ ูุงูููุช: {datetime.now().strftime('%Y-%m-%d | %H:%M:%S')}\n"
                f"ุงูุณุนุฑ ุงูุญุงูู: ${general_info.get('current_price', 0):,.2f}\n"
                f"ููุน ุงูุชุญููู: {general_info.get('analysis_type', 'ุชุญููู ุดุงูู')} ({' โ '.join(general_info.get('timeframes', []))})")

    def _format_timeframe_section(self, result: Dict) -> str:
        timeframe, symbol, analysis = result.get('timeframe', 'N/A').upper(), result.get('symbol', 'N/A'), result.get('raw_analysis', {})
        patterns: List[Pattern] = analysis.get('patterns', [])
        p_status_map = {"Forming": "โณ ููุฏ ุงูุชูููู", "Active": "โ ูุดุท / ููุนู", "Failed": "โ ูุดู"}
        section = f"๐ ูุฑูู {timeframe} โ {symbol}\n\n"
        if patterns:
            p = patterns[0]
            section += f"ุงููููุฐุฌ ุงูููู: {p.name} โ {p_status_map.get(p.status, p.status)}\n\n"
            section += f"ุดุฑูุท ุงูุชูุนูู:\n\nุงุฎุชุฑุงู ุงูููุงููุฉ ${p.activation_level:,.2f} ูุน ุซุจุงุช ุดูุนุฉ {timeframe} ููููุง.\n\n"
            section += f"ุดุฑูุท ุงูุฅูุบุงุก:\n\nูุณุฑ ุงูุฏุนู ${p.invalidation_level:,.2f} ูุน ุฅุบูุงู ุดูุนุฉ {timeframe} ุชุญุชู.\n\n"

        section += "๐ข ุงูุฏุนูู (ุฃููุงุน ูุฃุณุนุงุฑ)\n\n" + self._format_levels(analysis.get('supports', []))
        section += "\n๐ด ุงูููุงููุงุช (ุฃููุงุน ูุฃุณุนุงุฑ)\n\n" + self._format_levels(analysis.get('resistances', []))

        fibo_levels = [lvl for lvl in analysis.get('supports', []) + analysis.get('resistances', []) if 'fibonacci' in lvl.name.lower()]
        if fibo_levels:
            section += f"\n๐ ูุณุชููุงุช ููุจููุงุชุดู ({timeframe})\n\n"
            for lvl in sorted(fibo_levels, key=lambda x: x.value, reverse=True):
                if "0.5" in lvl.name: section += f"0.5 = ${lvl.value:,.2f}\n"
                if "0.618" in lvl.name: section += f"0.618 = ${lvl.value:,.2f}\n"
                if "0.786" in lvl.name: section += f"0.786 = ${lvl.value:,.2f}\n"
        return section

    def _format_levels(self, levels: List[Level]) -> str:
        level_texts = []
        level_map = {
            'ุฏุนู ุงูุงุชุฌุงู ูุตูุฑ ุงููุฏู': ('ุฏุนู ุชุฑูุฏ ูุตูุฑ', '(ุชุฑูุฏ)'),
            'ููุงููุฉ ุงูุงุชุฌุงู ูุตูุฑ ุงููุฏู': ('ููุงููุฉ ุชุฑูุฏ ูุตูุฑ', '(ุชุฑูุฏ)'),
            'ุฏุนู ุงูููุงุฉ ุงูุณุนุฑูุฉ': ('ุฏุนู ููุงุฉ ุณุนุฑูุฉ', '(ููุงุฉ)'),
            'ููุงููุฉ ุงูููุงุฉ ุงูุณุนุฑูุฉ': ('ููุงููุฉ ููุงุฉ ุณุนุฑูุฉ', '(ููุงุฉ)'),
            'fibonacci support': ('ุฏุนู ููุจู', '(ูุงูุจู)'),
            'fibonacci resistance': ('ููุงููุฉ ููุจู', '(ูุงูุจู)'),
            'fibonacci extension': ('ููุงููุฉ ููุจู ุงูุชุฏุงุฏ', '(ููุจู ุงูุชุฏุงุฏ)'),
            'ุฏุนู ุนุงู ุณุงุจู': ('ุฏุนู ุนุงู ุณุงุจู', '(ุณุงุจู)'),
            'ููุงููุฉ ุนุงูุฉ ุณุงุจูุฉ': ('ููุงููุฉ ุนุงูุฉ ุณุงุจูุฉ', '(ุณุงุจู)'),
            'volume profile poc': ('ููุทูุฉ ุทูุจ ุนุงููุฉ (POC)', '(POC)'),
            'high volume node': ('ููุทูุฉ ุทูุจ ุนุงููุฉ (HVN)', '(HVN)'),
        }

        for level in levels:
            if 'confluent' in level.name.lower():
                min_val, max_val = level.raw_data.get('range_min', level.value), level.raw_data.get('range_max', level.value)
                name_details = ""
                match = re.search(r'\((.*?)\)', level.name)
                if match: name_details = f" ({match.group(1)})"
                level_texts.append(f"ููุทูุฉ ูุฏูุฌุฉ{name_details}: ${min_val:,.2f} โ ${max_val:,.2f}")
                continue

            display_name, label = level.name, '(ุนุงู)'
            for key, (name, lbl) in level_map.items():
                if key in level.name.lower():
                    display_name, label = name, lbl
                    if "ููุจู" in display_name:
                        ratio_match = re.search(r'(\d\.\d+)', level.name)
                        if ratio_match: display_name += f" {ratio_match.group(1)}"
                    break
            level_texts.append(f"{display_name}: ${level.value:,.2f} {label}")

        return "\n".join(level_texts) + "\n" if level_texts else "ูุง ุชูุฌุฏ ูุณุชููุงุช ูุงุถุญุฉ.\n"

    def _format_combined_summary_and_trade(self, ranked_results: List[Dict]) -> str:
        summary_section = "๐ ุงูููุฎุต ุงูุชูููุฐู ูุงูุตููุฉ ุงูููุชุฑุญุฉ (ูุฌููุน)\nุงูููุฎุต ููู ูุฑูู ูุน ุญุงูุฉ ุงููุฌุงุญ / ุงููุดู\n\n"
        p_status_map = {"Forming": "โณ ููุฏ ุงูุชูููู", "Active": "โ ููุนู / ูุดุท", "Failed": "โ ูุดู"}
        for res in ranked_results:
            p = res.get('raw_analysis', {}).get('patterns', [None])[0]
            if p:
                targets = ' โ '.join([f"${t:,.0f}" for t in [p.target1, p.target2, p.target3] if t])
                summary_section += f"{res.get('timeframe').upper()}: {p.name} ({p_status_map.get(p.status, p.status)})\n"
                summary_section += f"ูุฌุงุญ ุงููููุฐุฌ: ุงุฎุชุฑุงู ${p.activation_level:,.0f} โ ุฃูุฏุงู: {targets}\n"
                summary_section += f"ูุดู ุงููููุฐุฌ: ูุณุฑ ${p.invalidation_level:,.0f}\n\n"

        summary_section += "ููุงุท ุงููุฑุงูุจุฉ ุงูุญุฑุฌุฉ (ูุฌููุนุฉ)\n\nุงุฎุชุฑุงูุงุช ุงูููุงููุฉ:\n"
        for res in ranked_results: summary_section += f"{res.get('timeframe').upper()} = ${res.get('raw_analysis', {}).get('patterns', [Pattern(name='', status='', timeframe='', activation_level=0, invalidation_level=0, target1=0)])[0].activation_level:,.0f}$\n"
        summary_section += "\nูุณูุฑ ุงูุฏุนู:\n"
        for res in ranked_results: summary_section += f"{res.get('timeframe').upper()} = ${res.get('raw_analysis', {}).get('patterns', [Pattern(name='', status='', timeframe='', activation_level=0, invalidation_level=0, target1=0)])[0].invalidation_level:,.0f}$\n"

        primary_rec = next((r for r in ranked_results if r.get('trade_setup')), None)
        if not primary_rec or not primary_rec.get('trade_setup'): return summary_section

        setup: TradeSetup = primary_rec.get('trade_setup')
        summary_section += f"\nโ ุงูุตููุฉ ุงููุคูุฏุฉ (ููุชุฑุญุฉ ุจุนุฏ ุฏูุฌ ุงููุฑููุงุช)\n\nุณุนุฑ ุงูุฏุฎูู ุงููุจุฏุฆู: {''.join(setup.confirmation_conditions)}.\n"
        if setup.optional_confirmation_conditions:
            summary_section += "\nุดุฑูุท ุงูุชุฃููุฏ ุงูุฅุถุงููุฉ (ุงุฎุชูุงุฑู ููู ููุตู ุจู):\n\n" + "\n".join(f"- {cond}" for cond in setup.optional_confirmation_conditions) + "\n"

        summary_section += f"\nููู ุงูุฎุณุงุฑุฉ: ูุณุฑ ${setup.stop_loss:,.2f} ูุฅุบูุงู ุณุงุนุฉ ุชุญุชู (ูุฑูู {setup.timeframe.upper()}).\n"
        targets = [t for t in [setup.target1, setup.target2] if t]
        if targets:
            summary_section += f"\nุงูุฃูุฏุงู:\nูุฏู ุฃูู: ${targets[0]:,.2f}\n"
            if len(targets) > 1: summary_section += f"ูุฏู ุซุงูู: ${targets[1]:,.2f}\n"
            summary_section += f"ุชูุฏุฏ ูุญุชูู: ${targets[-1] * 1.03:,.2f}\n"

        summary_section += "\nุงุณุชุฑุงุชูุฌูุฉ ุฏุนู ุงููุฑููุงุช:\n\n- ุฅุฐุง 4H ูุฎุชุฑู ุงูููุงููุฉ ููุบูู 4 ุณุงุนุงุช ููููุงุ ููุฐู ุฅุดุงุฑุฉ ููุงุณูููุฉ ูููุธุฑ ูู ุฒูุงุฏุฉ ุงููุฑุงูุฒ (scaling in).\n- ุฅุฐุง 1D ูุฎุชุฑู ููุงููุชู ุงูุฑุฆูุณูุฉุ ููุฐุง ูุฏ ูุญูู ุงูุตููุฉ ุฅูู ุงุณุชุซูุงุฑ ุทููู ุงูุฃูุฏ ุจุฃูุฏุงู ุนููุง.\n- ุฅุฐุง ุฃู ูุฑูู ููุณุฑ ุฏุนูู ุงููุนููุ ููุฐุง ุญุฏุซ ุญุฑุฌ ูุชุทูุจ ุฅุนุงุฏุฉ ุชูููู ููุฑูุฉ ููุตููุฉ ุฃู ุงูุฎุฑูุฌ ุญุณุจ ุณูุงุณุฉ ุฅุฏุงุฑุฉ ุงููุฎุงุทุฑ.\n"
        return summary_section
