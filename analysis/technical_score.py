import pandas as pd
from typing import Dict, Any

class TechnicalIndicators:
    def __init__(self, df: pd.DataFrame, config: dict = None):
        self.df = df.copy()
        if config is None: config = {}
        self.config = config
        # Define base column names from config or defaults
        self.rsi_period = config.get('RSI_PERIOD', 14)
        self.macd_fast = config.get('MACD_FAST', 12)
        self.macd_slow = config.get('MACD_SLOW', 26)
        self.macd_signal = config.get('MACD_SIGNAL', 9)
        self.bb_len = config.get('BBANDS_LEN', 20)
        self.bb_std = config.get('BBANDS_STD', 2.0)
        self.stoch_k = config.get('STOCH_K', 14)
        self.stoch_d = config.get('STOCH_D', 3)
        self.stoch_smooth = config.get('STOCH_SMOOTH', 3)
        self.sma_short = config.get('SMA_SHORT', 50)
        self.sma_long = config.get('SMA_LONG', 200)
        self.adx_period = config.get('ADX_PERIOD', 14)

    def get_comprehensive_analysis(self) -> Dict[str, Any]:
        """
        Analyzes pre-calculated indicator signals from the dataframe to generate a
        comprehensive score and detailed indicator states. This method relies on the
        signal columns generated by the `indicators` package.
        """
        required_data_length = 50
        if len(self.df) < required_data_length:
            return {'error': 'Not enough data for indicators.', 'total_score': 0, 'positive_indicators': [], 'negative_indicators': []}

        latest = self.df.iloc[-1]
        positive_indicators = []
        negative_indicators = []
        total_score = 0

        # --- MACD Analysis (from macd.py) ---
        macd_signal_col = f'MACD_Signal_{self.macd_fast}_{self.macd_slow}_{self.macd_signal}'
        if macd_signal_col in latest:
            macd_signal = latest[macd_signal_col]
            if macd_signal == 'Strong_Buy':
                total_score += 3
                positive_indicators.append("إشارة شراء قوية من MACD")
            elif macd_signal == 'Buy':
                total_score += 1.5
                positive_indicators.append("إشارة شراء من MACD")
            elif macd_signal == 'Strong_Sell':
                total_score -= 3
                negative_indicators.append("إشارة بيع قوية من MACD")
            elif macd_signal == 'Sell':
                total_score -= 1.5
                negative_indicators.append("إشارة بيع من MACD")

            macd_cross_col = f'MACD_Crossover_{self.macd_fast}_{self.macd_slow}_{self.macd_signal}'
            if macd_cross_col in latest:
                if latest[macd_cross_col] == 'Bullish_Cross':
                    total_score += 1 # Bonus for recent cross
                    positive_indicators.append("تقاطع إيجابي جديد على MACD")
                elif latest[macd_cross_col] == 'Bearish_Cross':
                    total_score -= 1 # Penalty for recent cross
                    negative_indicators.append("تقاطع سلبي جديد على MACD")

        # --- Divergence Analysis (from rsi.py & macd.py) ---
        rsi_div_col = f'RSI_Divergence_{self.rsi_period}'
        if rsi_div_col in latest and latest[rsi_div_col] != 'None' and isinstance(latest[rsi_div_col], str):
            if 'Bullish' in latest[rsi_div_col]:
                total_score += 3
                positive_indicators.append("وجود دايفرجنس إيجابي على مؤشر RSI")
            elif 'Bearish' in latest[rsi_div_col]:
                total_score -= 3
                negative_indicators.append("وجود دايفرجنس سلبي على مؤشر RSI")

        macd_div_col = f'MACD_Divergence_{self.macd_fast}_{self.macd_slow}_{self.macd_signal}'
        if macd_div_col in latest and latest[macd_div_col] != 'None' and isinstance(latest[macd_div_col], str):
            if 'Bullish' in latest[macd_div_col]:
                total_score += 3
                positive_indicators.append("وجود دايفرجنس إيجابي على مؤشر MACD")
            elif 'Bearish' in latest[macd_div_col]:
                total_score -= 3
                negative_indicators.append("وجود دايفرجنس سلبي على مؤشر MACD")

        # --- RSI Analysis (from rsi.py) ---
        rsi_signal_col = f'RSI_Signal_{self.rsi_period}'
        if rsi_signal_col in latest:
            rsi_val = latest.get(f'RSI_{self.rsi_period}', 0)
            if latest[rsi_signal_col] == 'Oversold':
                total_score += 2
                positive_indicators.append(f"مؤشر RSI في منطقة تشبع بيعي ({rsi_val:.1f})")
            elif latest[rsi_signal_col] == 'Overbought':
                total_score -= 2
                negative_indicators.append(f"مؤشر RSI في منطقة تشبع شرائي ({rsi_val:.1f})")

        # --- Bollinger Bands Analysis (from bbands.py) ---
        bb_signal_col = f'BB_Signal_{self.bb_len}_{self.bb_std}'
        if bb_signal_col in latest:
            if latest[bb_signal_col] == 'Touch_Lower':
                total_score += 1
                positive_indicators.append("السعر يلامس الحد السفلي لبولينجر باند (احتمال ارتداد)")
            elif latest[bb_signal_col] == 'Touch_Upper':
                total_score -= 1
                negative_indicators.append("السعر يلامس الحد العلوي لبولينجر باند (احتمال ارتداد)")

        # --- Stochastic Analysis (from stoch.py) ---
        stoch_signal_col = f'STOCH_Signal_{self.stoch_k}_{self.stoch_d}_{self.stoch_smooth}'
        if stoch_signal_col in latest:
            if latest[stoch_signal_col] == 'Oversold':
                total_score += 1
                positive_indicators.append("مؤشر ستوكاستيك في منطقة تشبع بيعي")
            elif latest[stoch_signal_col] == 'Overbought':
                total_score -= 1
                negative_indicators.append("مؤشر ستوكاستيك في منطقة تشبع شرائي")

        # --- Volume Analysis (from obv.py) ---
        if 'OBV_Signal' in latest:
            if latest['OBV_Signal'] == 'Confirm_Up':
                total_score += 1
                positive_indicators.append("مؤشر OBV يؤكد الاتجاه الصاعد")
            elif latest['OBV_Signal'] == 'Confirm_Down':
                total_score -= 1
                negative_indicators.append("مؤشر OBV يؤكد الاتجاه الهابط")
            elif 'Divergence' in str(latest['OBV_Signal']):
                if 'Bullish' in latest['OBV_Signal']:
                    total_score += 2
                    positive_indicators.append("دايفرجنس إيجابي على مؤشر OBV")
                elif 'Bearish' in latest['OBV_Signal']:
                    total_score -= 2
                    negative_indicators.append("دايفرجنس سلبي على مؤشر OBV")

        # --- Moving Average Analysis (from moving_averages.py) ---
        sma_signal_col = f'SMA_{self.sma_short}_Signal'
        if sma_signal_col in latest:
            if latest[sma_signal_col] == 'Above':
                total_score += 1
                positive_indicators.append(f"السعر يتداول فوق متوسط {self.sma_short}")
            else:
                total_score -= 1
                negative_indicators.append(f"السعر يتداول تحت متوسط {self.sma_short}")

        sma_long_signal_col = f'SMA_{self.sma_long}_Signal'
        if sma_long_signal_col in latest:
            if latest[sma_long_signal_col] == 'Above':
                total_score += 2
                positive_indicators.append(f"السعر يتداول فوق متوسط {self.sma_long} (إشارة طويلة المدى)")
            else:
                total_score -= 2
                negative_indicators.append(f"السعر يتداول تحت متوسط {self.sma_long} (إشارة طويلة المدى)")

        cross_col = f'Golden_Cross_{self.sma_short}_{self.sma_long}'
        if cross_col in latest and latest[cross_col] == True:
            total_score += 2
            positive_indicators.append(f"تقاطع ذهبي (متوسط {self.sma_short} فوق {self.sma_long})")

        death_cross_col = f'Death_Cross_{self.sma_short}_{self.sma_long}'
        if death_cross_col in latest and latest[death_cross_col] == True:
            total_score -= 2
            negative_indicators.append(f"تقاطع الموت (متوسط {self.sma_short} تحت {self.sma_long})")

        # --- ADX Analysis (from adx.py) ---
        adx_trend_col = f'ADX_Trend_{self.adx_period}'
        if adx_trend_col in latest:
            adx_val = latest.get(f'ADX_{self.adx_period}', 0)
            if latest[adx_trend_col] == 'Strong_Trend':
                if total_score > 0: total_score += 0.5
                if total_score < 0: total_score -= 0.5
                positive_indicators.append(f"مؤشر ADX يؤكد وجود اتجاه قوي ({adx_val:.1f})")
            elif latest[adx_trend_col] == 'No_Trend':
                negative_indicators.append(f"مؤشر ADX يشير إلى غياب اتجاه واضح ({adx_val:.1f})")

        # --- Prepare the final dictionary ---
        rsi_div_text = latest.get(rsi_div_col)
        macd_div_text = latest.get(macd_div_col)
        rsi_divergence_data = {'type': rsi_div_text} if isinstance(rsi_div_text, str) and rsi_div_text != 'None' else None
        macd_divergence_data = {'type': macd_div_text} if isinstance(macd_div_text, str) and macd_div_text != 'None' else None

        return {
            'total_score': total_score,
            'rsi': round(latest.get(f'RSI_{self.rsi_period}', 0), 2),
            'macd_is_bullish': 'Buy' in latest.get(macd_signal_col, ''),
            'obv_is_bullish': 'Up' in latest.get('OBV_Signal', ''),
            'rsi_divergence': rsi_divergence_data,
            'macd_divergence': macd_divergence_data,
            'positive_indicators': positive_indicators,
            'negative_indicators': negative_indicators
        }
